% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AutoXGBoostRegression.R
\name{AutoXGBoostRegression}
\alias{AutoXGBoostRegression}
\title{AutoXGBoostRegression is an automated XGBoost modeling framework with grid-tuning and model evaluation}
\usage{
AutoXGBoostRegression(data, TrainOnFull = FALSE, ValidationData = NULL,
  TestData = NULL, TargetColumnName = NULL, FeatureColNames = NULL,
  IDcols = NULL, model_path = NULL, metadata_path = NULL,
  ModelID = "FirstModel", ReturnFactorLevels = TRUE,
  ReturnModelObjects = TRUE, SaveModelObjects = FALSE,
  TransformNumericColumns = NULL, Verbose = 0L,
  NumOfParDepPlots = 3L, NThreads = 8L, eval_metric = "rmse",
  TreeMethod = "hist", GridTune = FALSE, grid_eval_metric = "rmse",
  BaselineComparison = "default", MaxModelsInGrid = 10L,
  MaxRunsWithoutNewWinner = 20L, MaxRunMinutes = 24L * 60L,
  PassInGrid = NULL, Shuffles = 1L, Trees = 50L, eta = NULL,
  max_depth = NULL, min_child_weight = NULL, subsample = NULL,
  colsample_bytree = NULL)
}
\arguments{
\item{data}{This is your data set for training and testing your model}

\item{TrainOnFull}{Set to TRUE to train on full data}

\item{ValidationData}{This is your holdout data set used in modeling either refine your hyperparameters.}

\item{TestData}{This is your holdout data set. Catboost using both training and validation data in the training process so you should evaluate out of sample performance with this data set.}

\item{TargetColumnName}{Either supply the target column name OR the column number where the target is located (but not mixed types).}

\item{FeatureColNames}{Either supply the feature column names OR the column number where the target is located (but not mixed types)}

\item{IDcols}{A vector of column names or column numbers to keep in your data but not include in the modeling.}

\item{model_path}{A character string of your path file to where you want your output saved}

\item{metadata_path}{A character string of your path file to where you want your model evaluation output saved. If left NULL, all output will be saved to model_path.}

\item{ModelID}{A character string to name your model and output}

\item{ReturnFactorLevels}{Set to TRUE to have the factor levels returned with the other model objects}

\item{ReturnModelObjects}{Set to TRUE to output all modeling objects (E.g. plots and evaluation metrics)}

\item{SaveModelObjects}{Set to TRUE to return all modeling objects to your environment}

\item{TransformNumericColumns}{Set to NULL to do nothing; otherwise supply the column names of numeric variables you want transformed}

\item{Verbose}{Set to 0 if you want to suppress model evaluation updates in training}

\item{NumOfParDepPlots}{Tell the function the number of partial dependence calibration plots you want to create.}

\item{NThreads}{Set the maximum number of threads you'd like to dedicate to the model run. E.g. 8}

\item{eval_metric}{This is the metric used to identify best grid tuned model. Choose from "r2", "RMSE", "MSE", "MAE"}

\item{TreeMethod}{Choose from "hist", "gpu_hist"}

\item{GridTune}{Set to TRUE to run a grid tuning procedure. Set a number in MaxModelsInGrid to tell the procedure how many models you want to test.}

\item{grid_eval_metric}{Choose from "poisson","mae","mape","mse","msle","kl","cs","r2"}

\item{BaselineComparison}{Set to either "default" or "best". Default is to compare each successive model build to the baseline model using max trees (from function args). Best makes the comparison to the current best model.}

\item{MaxModelsInGrid}{Number of models to test from grid options (243 total possible options)}

\item{MaxRunsWithoutNewWinner}{A number}

\item{MaxRunMinutes}{In minutes}

\item{PassInGrid}{Default is NULL. Provide a data.table of grid options from a previous run.}

\item{Shuffles}{Numeric. List a number to let the program know how many times you want to shuffle the grids for grid tuning}

\item{Trees}{Bandit grid partitioned. Supply a single value for non-grid tuning cases. Otherwise, supply a vector for the trees numbers you want to test. For running grid tuning, a NULL value supplied will mean these values are tested seq(1000L, 10000L, 1000L)}

\item{eta}{Bandit grid partitioned. Supply a single value for non-grid tuning cases. Otherwise, supply a vector for the LearningRate values to test. For running grid tuning, a NULL value supplied will mean these values are tested c(0.01,0.02,0.03,0.04)}

\item{max_depth}{Bandit grid partitioned. Number, or vector for depth to test.  For running grid tuning, a NULL value supplied will mean these values are tested seq(4L, 16L, 2L)}

\item{min_child_weight}{Number, or vector for min_child_weight to test.  For running grid tuning, a NULL value supplied will mean these values are tested seq(1.0, 10.0, 1.0)}

\item{subsample}{Number, or vector for subsample to test.  For running grid tuning, a NULL value supplied will mean these values are tested seq(0.55, 1.0, 0.05)}

\item{colsample_bytree}{Number, or vector for colsample_bytree to test.  For running grid tuning, a NULL value supplied will mean these values are tested seq(0.55, 1.0, 0.05)}
}
\value{
Saves to file and returned in list: VariableImportance.csv, Model, ValidationData.csv, EvalutionPlot.png, EvalutionBoxPlot.png, EvaluationMetrics.csv, ParDepPlots.R a named list of features with partial dependence calibration plots, ParDepBoxPlots.R, GridCollect, and GridList
}
\description{
AutoXGBoostRegression is an automated XGBoost modeling framework with grid-tuning and model evaluation that runs a variety of steps. First, the function will run a random grid tune over N number of models and find which model is the best (a default model is always included in that set). Once the model is identified and built, several other outputs are generated: validation data with predictions, evaluation plot, evaluation boxplot, evaluation metrics, variable importance, partial dependence calibration plots, partial dependence calibration box plots, and column names used in model fitting.
}
\examples{
\donttest{
# Create some dummy correlated data with numeric and categorical features
data <- RemixAutoML::FakeDataGenerator(Correlation = 0.85, N = 1000, ID = 2, ZIP = 0, AddDate = FALSE, Classification = FALSE, MultiClass = FALSE)

# Run function
TestModel <- RemixAutoML::AutoXGBoostRegression(

    # GPU or CPU
    TreeMethod = "hist",
    NThreads = 8L,
  
    # Metadata arguments
    model_path = normalizePath("./"),
    metadata_path = file.path(normalizePath("./"),"R_Model_Testing"),
    ModelID = "Test_Model_1",
    ReturnFactorLevels = TRUE,
    ReturnModelObjects = TRUE,
    SaveModelObjects = FALSE,   
  
    # Data arguments
    data = data,
    TrainOnFull = FALSE,
    ValidationData = NULL,
    TestData = NULL,
    TargetColumnName = "Adrian",
    FeatureColNames = names(data)[4L:ncol(data)],
    IDcols = c("x1","x2"),
    TransformNumericColumns = NULL,
  
    # Model evaluation
    eval_metric = "rmse",
    NumOfParDepPlots = 3L,
  
    # Grid tuning arguments - PassInGrid is the best of GridMetrics
    PassInGrid = NULL,
    GridTune = TRUE,
    grid_eval_metric = "mse",
    BaselineComparison = "default",
    MaxModelsInGrid = 10L,
    MaxRunsWithoutNewWinner = 20L,
    MaxRunMinutes = 24L*60L,
    Verbose = 1L,
  
    # Trees, Depth, and LearningRate used in the bandit grid tuning
    # Must set Trees to a single value if you are not grid tuning
    # The ones below can be set to NULL and the values in the example will be used 
    Shuffles = 1L,
    Trees = seq(50L, 500L, 50L),
    eta = seq(0.05,0.40,0.05),
    max_depth = seq(4L, 16L, 2L),
    min_child_weight = seq(1.0, 10.0, 1.0),
    subsample = seq(0.55, 1.0, 0.05),
    colsample_bytree = seq(0.55, 1.0, 0.05))
}
}
\seealso{
Other Automated Regression: \code{\link{AutoCatBoostHurdleModel}},
  \code{\link{AutoCatBoostRegression}},
  \code{\link{AutoH2oDRFHurdleModel}},
  \code{\link{AutoH2oDRFRegression}},
  \code{\link{AutoH2oGBMHurdleModel}},
  \code{\link{AutoH2oGBMRegression}},
  \code{\link{AutoH2oGLMRegression}},
  \code{\link{AutoH2oMLRegression}}, \code{\link{AutoNLS}},
  \code{\link{AutoXGBoostHurdleModel}}
}
\author{
Adrian Antico
}
\concept{Automated Regression}
