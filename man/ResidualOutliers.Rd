% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ResidualOutliers.R
\name{ResidualOutliers}
\alias{ResidualOutliers}
\title{ResidualOutliers}
\usage{
ResidualOutliers(
  data,
  DateColName = "DateTime",
  TargetColName = "Target",
  PredictedColName = NULL,
  TimeUnit = "day",
  Lags = 5,
  MA = 5,
  SLags = 0,
  SMA = 0,
  tstat = 2
)
}
\arguments{
\item{data}{the source residuals data.table}

\item{DateColName}{The name of your data column to use in reference to the target variable}

\item{TargetColName}{The name of your target variable column}

\item{PredictedColName}{The name of your predicted value column. If you supply this, you will run anomaly detection of the difference between the target variable and your predicted value. If you leave PredictedColName NULL then you will run anomaly detection over the target variable.}

\item{TimeUnit}{The time unit of your date column: hour, day, week, month, quarter, year}

\item{Lags}{the largest lag or moving average (seasonal too) values for the arima fit}

\item{MA}{Max moving average}

\item{SLags}{Max seasonal lags}

\item{SMA}{Max seasonal moving averages}

\item{tstat}{the t-stat value for tsoutliers}
}
\value{
A named list containing FullData = original data.table with outliers data and ARIMA_MODEL = the arima model.
}
\description{
ResidualOutliers is an automated time series outlier detection function that utilizes tsoutliers and auto.arima. It looks for five types of outliers: "AO" Additive outliter - a singular extreme outlier that surrounding values aren't affected by; "IO" Innovational outlier - Initial outlier with subsequent anomalous values; "LS" Level shift - An initial outlier with subsequent observations being shifted by some constant on average; "TC" Transient change - initial outlier with lingering effects that dissapate exponentially over time; "SLS" Seasonal level shift - similar to level shift but on a seasonal scale.
}
\examples{
\dontrun{
data <- data.table::data.table(
  DateTime = as.Date(Sys.time()),
  Target = as.numeric(stats::filter(
    rnorm(1000, mean = 50, sd = 20),
  filter=rep(1,10),
  circular=TRUE)))
data[, temp := seq(1:1000)][, DateTime := DateTime - temp][
  , temp := NULL]
data <- data[order(DateTime)]
data[, Predicted := as.numeric(
  stats::filter(rnorm(1000, mean = 50, sd = 20),
filter=rep(1,10),
circular=TRUE))]
stuff <- ResidualOutliers(
  data = data,
  DateColName = "DateTime",
  TargetColName = "Target",
  PredictedColName = NULL,
  TimeUnit = "day",
  Lags = 5,
  MA = 5,
  SLags = 0,
  SMA = 0,
  tstat = 4)
data     <- stuff[[1]]
model    <- stuff[[2]]
outliers <- data[type != "<NA>"]
}
}
\seealso{
Other Unsupervised Learning: 
\code{\link{AutoClusteringScoring}()},
\code{\link{AutoClustering}()},
\code{\link{GenTSAnomVars}()},
\code{\link{H2OIsolationForestScoring}()},
\code{\link{H2OIsolationForest}()}
}
\author{
Adrian Antico
}
\concept{Unsupervised Learning}
