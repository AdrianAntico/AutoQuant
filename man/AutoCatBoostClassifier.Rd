% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AutoCatBoostClassifier.R
\name{AutoCatBoostClassifier}
\alias{AutoCatBoostClassifier}
\title{AutoCatBoostClassifier is an automated catboost model grid-tuning classifier and evaluation system}
\usage{
AutoCatBoostClassifier(
  data,
  TrainOnFull = FALSE,
  ValidationData = NULL,
  TestData = NULL,
  TargetColumnName = NULL,
  FeatureColNames = NULL,
  PrimaryDateColumn = NULL,
  ClassWeights = NULL,
  IDcols = NULL,
  task_type = "GPU",
  NumGPUs = 1,
  eval_metric = "MCC",
  loss_function = NULL,
  model_path = NULL,
  metadata_path = NULL,
  ModelID = "FirstModel",
  NumOfParDepPlots = 0L,
  ReturnModelObjects = TRUE,
  SaveModelObjects = FALSE,
  PassInGrid = NULL,
  GridTune = FALSE,
  MaxModelsInGrid = 10L,
  MaxRunsWithoutNewWinner = 20L,
  MaxRunMinutes = 24L * 60L,
  Shuffles = 1L,
  BaselineComparison = "default",
  MetricPeriods = 10L,
  Trees = 50L,
  Depth = 6,
  LearningRate = NULL,
  L2_Leaf_Reg = 3,
  RandomStrength = 1,
  BorderCount = 128,
  RSM = NULL,
  BootStrapType = NULL,
  GrowPolicy = NULL
)
}
\arguments{
\item{data}{This is your data set for training and testing your model}

\item{TrainOnFull}{Set to TRUE to train on full data and skip over evaluation steps}

\item{ValidationData}{This is your holdout data set used in modeling either refine your hyperparameters. Catboost using both training and validation data in the training process so you should evaluate out of sample performance with this data set.}

\item{TestData}{This is your holdout data set. Catboost using both training and validation data in the training process so you should evaluate out of sample performance with this data set.}

\item{TargetColumnName}{Either supply the target column name OR the column number where the target is located, but not mixed types. Note that the target column needs to be a 0 | 1 numeric variable.}

\item{FeatureColNames}{Either supply the feature column names OR the column number where the target is located, but not mixed types. Also, not zero-indexed.}

\item{PrimaryDateColumn}{Supply a date or datetime column for catboost to utilize time as its basis for handling categorical features, instead of random shuffling}

\item{ClassWeights}{Supply a vector of weights for your target classes. E.g. c(0.25, 1) to weight your 0 class by 0.25 and your 1 class by 1.}

\item{IDcols}{A vector of column names or column numbers to keep in your data but not include in the modeling.}

\item{task_type}{Set to "GPU" to utilize your GPU for training. Default is "CPU".}

\item{NumGPUs}{Numeric. If you have 4 GPUs supply 4 as a value.}

\item{eval_metric}{This is the metric used inside catboost to measure performance on validation data during a grid-tune. "AUC" is the default. 'Logloss', 'CrossEntropy', 'Precision', 'Recall', 'F1', 'BalancedAccuracy', 'BalancedErrorRate', 'MCC', 'Accuracy', 'CtrFactor', 'AUC', 'BrierScore', 'HingeLoss', 'HammingLoss', 'ZeroOneLoss', 'Kappa', 'WKappa', 'LogLikelihoodOfPrediction', 'TotalF1', 'PairLogit', 'PairLogitPairwise', 'PairAccuracy', 'QueryCrossEntropy', 'QuerySoftMax', 'PFound', 'NDCG', 'AverageGain', 'PrecisionAt', 'RecallAt', 'MAP'}

\item{loss_function}{Default is NULL. Select the loss function of choice. c("MultiRMSE", 'Logloss','CrossEntropy','Lq','PairLogit','PairLogitPairwise','YetiRank','YetiRankPairwise','QueryCrossEntropy','QuerySoftMax')}

\item{model_path}{A character string of your path file to where you want your output saved}

\item{metadata_path}{A character string of your path file to where you want your model evaluation output saved. If left NULL, all output will be saved to model_path.}

\item{ModelID}{A character string to name your model and output}

\item{NumOfParDepPlots}{Tell the function the number of partial dependence calibration plots you want to create. Calibration boxplots will only be created for numerical features (not dummy variables)}

\item{ReturnModelObjects}{Set to TRUE to output all modeling objects. E.g. plots and evaluation metrics}

\item{SaveModelObjects}{Set to TRUE to return all modeling objects to your environment}

\item{PassInGrid}{Defaults to NULL. Pass in a single row of grid from a previous output as a data.table (they are collected as data.tables)}

\item{GridTune}{Set to TRUE to run a grid tuning procedure. Set a number in MaxModelsInGrid to tell the procedure how many models you want to test.}

\item{MaxModelsInGrid}{Number of models to test from grid options.}

\item{MaxRunsWithoutNewWinner}{A number}

\item{MaxRunMinutes}{In minutes}

\item{Shuffles}{Numeric. List a number to let the program know how many times you want to shuffle the grids for grid tuning}

\item{BaselineComparison}{Set to either "default" or "best". Default is to compare each successive model build to the baseline model using max trees (from function args). Best makes the comparison to the current best model.}

\item{MetricPeriods}{Number of trees to build before evaluating intermediate metrics. Default is 10L}

\item{Trees}{Bandit grid partitioned. Supply a single value for non-grid tuning cases. Otherwise, supply a vector for the trees numbers you want to test. For running grid tuning, a NULL value supplied will mean these values are tested seq(1000L, 10000L, 1000L)}

\item{Depth}{Bandit grid partitioned Number, or vector for depth to test.  For running grid tuning, a NULL value supplied will mean these values are tested seq(4L, 16L, 2L)}

\item{LearningRate}{Bandit grid partitioned. Supply a single value for non-grid tuning cases. Otherwise, supply a vector for the LearningRate values to test. For running grid tuning, a NULL value supplied will mean these values are tested c(0.01,0.02,0.03,0.04)}

\item{L2_Leaf_Reg}{Random testing. Supply a single value for non-grid tuning cases. Otherwise, supply a vector for the L2_Leaf_Reg values to test. For running grid tuning, a NULL value supplied will mean these values are tested seq(1.0, 10.0, 1.0)}

\item{RandomStrength}{A multiplier of randomness added to split evaluations. Default value is 1 which adds no randomness.}

\item{BorderCount}{Number of splits for numerical features. Catboost defaults to 254 for CPU and 128 for GPU}

\item{RSM}{CPU only. Random testing. Supply a single value for non-grid tuning cases. Otherwise, supply a vector for the RSM values to test. For running grid tuning, a NULL value supplied will mean these values are tested c(0.80, 0.85, 0.90, 0.95, 1.0)}

\item{BootStrapType}{Random testing. Supply a single value for non-grid tuning cases. Otherwise, supply a vector for the BootStrapType values to test. For running grid tuning, a NULL value supplied will mean these values are tested c("Bayesian", "Bernoulli", "Poisson", "MVS", "No")}

\item{GrowPolicy}{Random testing. NULL, character, or vector for GrowPolicy to test. For grid tuning, supply a vector of values. For running grid tuning, a NULL value supplied will mean these values are tested c("SymmetricTree", "Depthwise", "Lossguide")}
}
\value{
Saves to file and returned in list: VariableImportance.csv, Model (the model), ValidationData.csv, ROC_Plot.png, EvalutionPlot.png, EvaluationMetrics.csv, ParDepPlots.R a named list of features with partial dependence calibration plots, GridCollect, and GridList
}
\description{
AutoCatBoostClassifier is an automated modeling function that runs a variety of steps. First, a stratified sampling (by the target variable) is done to create train, validation, and test sets (if not supplied). Then, the function will run a random grid tune over N number of models and find which model is the best (a default model is always included in that set). Once the model is identified and built, several other outputs are generated: validation data with predictions (on test data), an ROC plot, evaluation plot, evaluation metrics, variable importance, partial dependence calibration plots, partial dependence calibration box plots, and column names used in model fitting. You can download the catboost package using devtools, via: devtools::install_github('catboost/catboost', subdir = 'catboost/R-package')
}
\examples{
\dontrun{
# Create some dummy correlated data
data <- RemixAutoML::FakeDataGenerator(
  Correlation = 0.85,
  N = 10000,
  ID = 2,
  ZIP = 0,
  AddDate = FALSE,
  Classification = TRUE,
  MultiClass = FALSE)

# Run function
TestModel <- RemixAutoML::AutoCatBoostClassifier(

    # GPU or CPU and the number of available GPUs
    task_type = "GPU",
    NumGPUs = 1,

    # Metadata arguments:
    #   'ModelID' is used to create part of the file
    #       names generated when saving to file'
    #   'model_path' is where the minimal model objects
    #       for scoring will be stored
    #   'ModelID' will be the name of the saved model object
    #   'metadata_path' is where model evaluation and model
    #       interpretation files are saved
    #    objects saved to model_path if metadata_path is null
    #    Saved objects include:
    #    'ModelID_ValidationData.csv' is the supplied or generated
    #       TestData with predicted values
    #    'ModelID_ROC_Plot.png' and 'Model_ID_EvaluationPlot.png'
    #        calibration plot
    #    'ModelID_VariableImportance.csv' is the variable importance.
    #        This won't be saved to file if GrowPolicy is either
    #          "Depthwise" or "Lossguide" was used
    #    'ModelID_ExperimentGrid.csv' if GridTune = TRUE.
    #        Results of all model builds including parameter settings,
    #          bandit probs, and grid IDs
    #    'ModelID_EvaluationMetrics.csv' which contains all confusion
    #           matrix measures across all thresholds
    ModelID = "Test_Model_1",
    model_path = normalizePath("./"),
    metadata_path = file.path(normalizePath("./")),
    SaveModelObjects = FALSE,
    ReturnModelObjects = TRUE,

    # Data arguments:
    #   'TrainOnFull' is to train a model with 100 percent of
    #      your data.
    #   That means no holdout data will be used for evaluation
    #   If ValidationData and TestData are NULL and TrainOnFull
    #      is FALSE then data will be split 70 20 10
    #   'PrimaryDateColumn' is a date column in data that is
    #      meaningful when sorted.
    #    CatBoost categorical treatment is enhanced when supplied
    #   'IDcols' are columns in your data that you don't use for
    #      modeling but get returned with ValidationData
    data = data,
    TrainOnFull = FALSE,
    ValidationData = NULL,
    TestData = NULL,
    TargetColumnName = "Adrian",
    FeatureColNames = names(data)[!names(data) \%chin\%
        c("IDcol_1","IDcol_2","Adrian")],
    PrimaryDateColumn = NULL,
    ClassWeights = c(1L,1L),
    IDcols = c("IDcol_1","IDcol_2"),

    # Model evaluation:
    #   'eval_metric' is the measure catboost uses when evaluting
    #       on holdout data during its bandit style process
    #   'loss_function' the loss function used in training optimization
    #   'NumOfParDepPlots' Number of partial dependence calibration plots
    #       generated.
    #     A value of 3 will return plots for the top 3 variables based
    #       on variable importance
    #     Won't be returned if GrowPolicy is either "Depthwise" or
    #       "Lossguide" is used
    #     Can run the RemixAutoML::ParDepCalPlots() with the outputted
    #        ValidationData
    eval_metric = "AUC",
    loss_function = "Logloss",
    MetricPeriods = 10L,
    NumOfParDepPlots = ncol(data)-1L-2L,

    # Grid tuning arguments:
    #   'PassInGrid' is for retraining using a previous grid winning args
    #   'MaxModelsInGrid' is a cap on the number of models that will run
    #   'MaxRunsWithoutNewWinner' number of runs without a new winner
    #      before exiting grid tuning
    #   'MaxRunMinutes' is a cap on the number of minutes that will run
    #   'Shuffles' is the number of times you want the random grid
    #      arguments shuffled
    #   'BaselineComparison' default means to compare each model build
    #      with a default built of catboost using max(Trees)
    #   'MetricPeriods' is the number of trees built before evaluting
    #      holdoutdata internally. Used in finding actual Trees used.
    PassInGrid = NULL,
    GridTune = FALSE,
    MaxModelsInGrid = 100L,
    MaxRunsWithoutNewWinner = 20L,
    MaxRunMinutes = 24L*60L,
    Shuffles = 4L,
    BaselineComparison = "default",

    # Trees, Depth, and LearningRate used in the bandit grid tuning
    # Must set Trees to a single value if you are not grid tuning
    # The ones below can be set to NULL and the values in the example
    #   will be used
    # GrowPolicy is turned off for CPU runs
    # BootStrapType utilizes Poisson only for GPU and MVS only for CPU
    Trees = seq(100L, 500L, 50L),
    Depth = seq(4L, 8L, 1L),
    LearningRate = seq(0.01,0.10,0.01),
    L2_Leaf_Reg = seq(1.0, 10.0, 1.0),
    RandomStrength = 1,
    RSM = c(0.80, 0.85, 0.90, 0.95, 1.0),
    BootStrapType = c("Bayesian", "Bernoulli", "Poisson", "MVS", "No"),
    GrowPolicy = c("SymmetricTree", "Depthwise", "Lossguide"))
}
}
\seealso{
Other Automated Supervised Learning - Binary Classification: 
\code{\link{AutoH2oDRFClassifier}()},
\code{\link{AutoH2oGBMClassifier}()},
\code{\link{AutoH2oGLMClassifier}()},
\code{\link{AutoH2oMLClassifier}()},
\code{\link{AutoXGBoostClassifier}()}
}
\author{
Adrian Antico
}
\concept{Automated Supervised Learning - Binary Classification}
