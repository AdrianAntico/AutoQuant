% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AutoLagRollStats.R
\name{AutoLagRollStats}
\alias{AutoLagRollStats}
\title{AutoLagRollStats}
\usage{
AutoLagRollStats(data, Targets = NULL, HierarchyGroups = NULL,
  IndependentGroups = NULL, DateColumn = NULL, TimeUnit = "day",
  TimeUnitAgg = "day", TimeGroups = "day", TimeBetween = NULL,
  RollOnLag1 = TRUE, Type = "Lag", SimpleImpute = TRUE,
  Lags = c(1:5), MA_RollWindows = c(2, 5, 10), SD_RollWindows = c(5,
  10), Skew_RollWindows = c(5, 10), Kurt_RollWindows = c(5, 10),
  Quantile_RollWindows = c(10), Quantiles_Selected = c("q25", "q75"),
  Debug = FALSE)
}
\arguments{
\item{data}{A data.table you want to run the function on}

\item{Targets}{A character vector of the column names for the reference column in which you will build your lags and rolling stats}

\item{HierarchyGroups}{A vector of categorical column names that you want to have generate all lags and rolling stats done for the individual columns and their full set of interactions.}

\item{IndependentGroups}{A vector of categorical column names that you want to have run independently of each other. This will mean that no interaction will be done.}

\item{DateColumn}{The column name of your date column used to sort events over time}

\item{TimeUnit}{List the time aggregation level for the time between events features, such as "hour", "day", "weeks", "months", "quarter", or "year"}

\item{TimeUnitAgg}{List the time aggregation of your data that you want to use as a base time unit for your features. E.g. "raw" or "day"}

\item{TimeGroups}{A vector of TimeUnits indicators to specify any time-aggregated GDL features you want to have returned. E.g. c("raw" (no aggregation is done),"hour", "day","week","month","quarter","year")}

\item{TimeBetween}{Specify a desired name for features created for time between events. Set to NULL if you don't want time between events features created.}

\item{RollOnLag1}{Set to FALSE to build rolling stats off of target columns directly or set to TRUE to build the rolling stats off of the lag-1 target}

\item{Type}{List either "Lag" if you want features built on historical values or "Lead" if you want features built on future values}

\item{SimpleImpute}{Set to TRUE for factor level imputation of "0" and numeric imputation of -1}

\item{Lags}{A numeric vector of the specific lags you want to have generated. You must include 1 if WindowingLag = 1.}

\item{Quantiles_Selected}{Select from the following c("q5", "q10", "q15", "q20", "q25", "q30", "q35", "q40", "q45", "q50", "q55", "q60"," q65", "q70", "q75", "q80", "q85", "q90", "q95")}

\item{Debug}{Set to TRUE to get a print of which steps are running}

\item{MARollWindows}{A numeric vector of the specific rolling statistics window sizes you want to utilize in the calculations.}

\item{SDRollWindows}{A numeric vector of Standard Deviation rolling statistics window sizes you want to utilize in the calculations.}

\item{SkewRollWindows}{A numeric vector of Skewness rolling statistics window sizes you want to utilize in the calculations.}

\item{KurtRollWindows}{A numeric vector of Kurtosis rolling statistics window sizes you want to utilize in the calculations.}

\item{QuantileRollWindows}{A numeric vector of Quantile rolling statistics window sizes you want to utilize in the calculations.}
}
\value{
data.table of original data plus created lags, rolling stats, and time between event lags and rolling stats
}
\description{
AutoLagRollStats Builds lags and a large variety of rolling statistics with options to generate them for hierarchical categorical interactions.
}
\examples{

# Create fake daily data
N = 25116
data <- data.table::data.table(DateTime = as.Date(Sys.time()),
                               Target = stats::filter(rnorm(N,
                                                            mean = 50,
                                                            sd = 20),
                                                      filter=rep(1,10),
                                                      circular=TRUE))
data[, LETTERSS := sample(x = LETTERS, size = N, replace = TRUE)]
data[, LETTERS := sample(x = LETTERS, size = N, replace = TRUE)]
data[, letters := sample(x = letters, size = N, replace = TRUE)]
data[, temp := seq(1:N)][, DateTime := DateTime - temp][, temp := NULL]
data <- data[order(DateTime)]

# Run Function
data <- AutoLagRollStats(
  
  # Data
  data                 = data,
  DateColumn           = "DateTime",
  Targets              = c("Target"),
  HierarchyGroups      = c("LETTERSS","LETTERS","letters"),
  IndependentGroups    = NULL,
  TimeGroups           = c("day","weeks","months"),
  TimeUnitAgg          = "day",

  # Services
  TimeBetween          = NULL,
  TimeUnit             = NULL,
  RollOnLag1           = TRUE,
  Type                 = "Lag",
  SimpleImpute         = TRUE,
     
  # Calculated Columns
  Lags                  = c(seq(1,5,1)),
  MA_RollWindows        = c(3,5,10,15,20,25),
  SD_RollWindows        = c(seq(5, 95, 5)),
  Skew_RollWindows      = c(seq(5, 95, 5)),
  Kurt_RollWindows      = c(seq(5, 95, 5)),
  Quantile_RollWindows  = c(seq(5, 95, 5)),
  Quantiles_Selected    = c("q5","q10","q95"),
  Debug                 = FALSE)
}
\seealso{
Other Feature Engineering: \code{\link{AutoDataPartition}},
  \code{\link{AutoFourierFeatures}},
  \code{\link{AutoLagRollStatsScoring}},
  \code{\link{AutoTransformationCreate}},
  \code{\link{AutoTransformationScore}},
  \code{\link{AutoWord2VecModeler}},
  \code{\link{ContinuousTimeDataGenerator}},
  \code{\link{CreateCalendarVariables}},
  \code{\link{CreateHolidayVariables}},
  \code{\link{DT_GDL_Feature_Engineering}},
  \code{\link{DummifyDT}}, \code{\link{ModelDataPrep}},
  \code{\link{Partial_DT_GDL_Feature_Engineering}},
  \code{\link{TimeSeriesFill}}
}
\author{
Adrian Antico
}
\concept{Feature Engineering}
