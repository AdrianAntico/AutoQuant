% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Adrian_Antico_Modeling_Tools_Library.R
\name{AutoH20Modeler}
\alias{AutoH20Modeler}
\title{An Automated Machine Learning Framework using H20}
\usage{
AutoH20Modeler(Construct, max_memory, ratios, BL_Trees, nthreads,
  model_path, MaxRuntimeSeconds = 3600, MaxModels = 30,
  TrainData = NULL, TestData = NULL)
}
\arguments{
\item{Construct}{Core instruction file for automation}

\item{max_memory}{The ceiling amount of memory H20 will utilize}

\item{ratios}{The percentage of train samples from source data (remainder goes to validation set)}

\item{BL_Trees}{The number of trees to build in baseline GBM or RandomForest}

\item{nthreads}{Set the number of threads to run function}

\item{model_path}{Directory path for where you want your models saved}

\item{MaxRuntimeSeconds}{Number of seconds of run time for grid tuning}

\item{MaxModels}{Number of models you'd like to have returned}

\item{TrainData}{Set to NULL or supply a data.table for training data}

\item{TestData}{Set to NULL or supply  a data.table for validation data}
}
\value{
Returns saved models, corrected Construct file, variable importance tables, evaluation and partial dependence calibration plots, model performance measure, etc.
}
\description{
1. Logic: Error checking in the modeling arguments from your Construction file
2. ML: Build grid-tuned models and baseline models for comparison and checks which one performs better on validation data
3. Evaluation: Collects the performance metrics for both
4. Evaluation: Generates calibration plots (and boxplots for regression) for the winning model
5. Evaluation: Generates partial dependence calibration plots (and boxplots for regression) for the winning model
6. Evaluation: Generates variable importance tables and a table of non-important features
7. Production: Creates a storage file containing: model name, model path, grid tune performance, baseline performance, and threshold (if classification) and stores that file in your model_path location
}
\examples{
\dontrun{
Construct <- data.table::data.table(Targets = "target",
                        Distribution    = "bernoulli",
                        Loss            = "AUC",
                        Quantile        = 0.01,
                        ModelName       = "bla",
                        Algorithm       = "gbm",
                        dataName        = "aa",
                        TargetCol       = c("1"),
                        FeatureCols     = c("2:4"),
                        CreateDate      = Sys.time(),
                        GridTune        = FALSE,
                        ExportValidData = TRUE,
                        ParDep          = 10,
                        PD_Data         = "All",
                        ThreshType      = "f1",
                        FSC             = 0.001,
                        tpProfit        = rep(0,N),
                        tnProfit        = rep(0,N),
                        fpProfit        = rep(-1,N),
                        fnProfit        = rep(-5,N),
                        SaveModel       = rep("FALSE",N),
                        SaveModelType   = rep("Mojo",N),
                        PredsAllData    = rep(TRUE,N),
                        TargetEncoding  = rep(NA,N),
                        SupplyData      = rep(FALSE,N))
AutoH20Modeler(Construct,
               max_memory = "28G",
               ratios = 0.75,
               BL_Trees = 500,
               nthreads = 5,
               model_path = getwd(),
               MaxRuntimeSeconds = 3600,
               MaxModels = 30,
               TrainData = NULL,
               TestData  = NULL)
}
}
\seealso{
Other Supervised Learning: \code{\link{AutoTS}},
  \code{\link{nlsModelFit}}
}
\author{
Adrian Antico
}
\concept{Supervised Learning}
