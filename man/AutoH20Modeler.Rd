% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Adrian_Antico_Modeling_Tools_Library.R
\name{AutoH20Modeler}
\alias{AutoH20Modeler}
\title{An Automated Machine Learning Framework using H20}
\usage{
AutoH20Modeler(Construct, max_memory, ratios, BL_Trees, nthreads,
  model_path)
}
\arguments{
\item{Construct}{Core instruction file for automation}

\item{max_memory}{The ceiling amount of memory H20 will utilize}

\item{ratios}{The percentage of train samples from source data (remainder goes to validation set)}

\item{BL_Trees}{The number of trees to build in baseline GBM or RandomForest}

\item{nthreads}{Set the number of threads to run function}
}
\value{
Returns saved models, corrected Construct file, variable importance tables, evaluation and partial dependence calibration plots, model performance measure, etc.
}
\description{
1. Logic: Error checking in the modeling arguments from your Construction file
2. ML: Build grid-tuned models and baseline models for comparison and checks which one performs better on validation data
3. Evaluation: Collects the performance metrics for both
4. Evaluation: Generates calibration plots (and boxplots for regression) for the winning model
5. Evaluation: Generates partial dependence calibration plots (and boxplots for regression) for the winning model
6. Evaluation: Generates variable importance tables and a table of non-important features
7. Production: Creates a storage file containing: model name, model path, grid tune performance, baseline performance, and threshold (if classification) and stores that file in your model_path location
}
\examples{
aa <- data.table(target = runif(10000))
aa[, x1 := qnorm(target)]
aa[, x2 := runif(10000)]
aa[, Independent_Variable1 := log(pnorm(0.75 * x1 + sqrt(1-0.75^2) * qnorm(x2)))]
aa[, Independent_Variable2 := (pnorm(0.75 * x1 + sqrt(1-0.75^2) * qnorm(x2)))]
aa[, Independent_Variable3 := exp(pnorm(0.75 * x1 + sqrt(1-0.75^2) * qnorm(x2)))]
aa[, Independent_Variable4 := exp(exp(pnorm(0.75 * x1 + sqrt(1-0.75^2) * qnorm(x2))))]
aa[, Independent_Variable5 := sqrt(pnorm(0.75 * x1 + sqrt(1-0.75^2) * qnorm(x2)))]
aa[, Independent_Variable6 := (pnorm(0.75 * x1 + sqrt(1-0.75^2) * qnorm(x2)))^0.10]
aa[, Independent_Variable7 := (pnorm(0.75 * x1 + sqrt(1-0.75^2) * qnorm(x2)))^0.25]
aa[, Independent_Variable8 := (pnorm(0.75 * x1 + sqrt(1-0.75^2) * qnorm(x2)))^0.75]
aa[, Independent_Variable9 := (pnorm(0.75 * x1 + sqrt(1-0.75^2) * qnorm(x2)))^2]
aa[, Independent_Variable10 := (pnorm(0.75 * x1 + sqrt(1-0.75^2) * qnorm(x2)))^4]
aa[, ':=' (x1 = NULL, x2 = NULL)]
aa[, target := as.factor(ifelse(target > 0.5,1,0))]
Construct <- data.table(Targets         = "target",
                       Distribution    = "bernoulli",
                       Loss            = "AUC",
                       Quantile        = 0.01,
                       ModelName       = "bla",
                       Algoithm        = "gbm",
                       dataName        = "aa",
                       TargetCol       = c("1"),
                       FeatureCols     = c("2:4"),
                       CreateDate      = Sys.time(),
                       GridTune        = FALSE,
                       ExportValidData = TRUE,
                       ParDep          = 10,
                       PD_Data         = "All",
                       ThreshType      = "f1",
                       FSC             = 0.001,
                       tpProfit        = rep(0,N),
                       tnProfit        = rep(0,N),
                       fpProfit        = rep(-1,N),
                       fnProfit        = rep(-5,N))
AutoH20Modeler(Construct,
              max_memory = "28G",
              ratios = 0.75,
              BL_Trees = 500,
              nthreads = 5,
              model_path = getwd())
}
\author{
Adrian Antico at RemixInstitute.com
}
