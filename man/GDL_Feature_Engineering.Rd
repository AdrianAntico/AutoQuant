% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Adrian_Antico_Modeling_Tools_Library.R
\name{GDL_Feature_Engineering}
\alias{GDL_Feature_Engineering}
\title{An Automated Feature Engineering Function}
\usage{
GDL_Feature_Engineering(data, lags = c(seq(1, 5, 1)), periods = c(3, 5,
  10, 15, 20, 25), statsFUNs = c(function(x) quantile(x, probs = 0.1,
  na.rm = TRUE), function(x) quantile(x, probs = 0.9, na.rm = TRUE),
  function(x) mean(x, na.rm = TRUE), function(x) sd(x, na.rm = TRUE),
  function(x) quantile(x, probs = 0.25, na.rm = TRUE), function(x)
  quantile(x, probs = 0.75, na.rm = TRUE)), statsNames = c("q10", "q90",
  "mean", "sd", "q25", "q75"), targets = c("qty"),
  groupingVars = c("Group1", "Group2"), sortDateName = "date",
  timeDiffTarget = c("TimeDiffName"), timeAgg = c("auto", "secs",
  "mins", "hours", "days", "weeks"), WindowingLag = 0, Type = c("Lag",
  "Lead"), Timer = TRUE, SkipCols = NULL, SimpleImpute = TRUE)
}
\arguments{
\item{data}{The data source you want to run the function on}

\item{lags}{The list of specific lags you want to have generated}

\item{periods}{The number of periods to use for rolling stats}

\item{statsFUNs}{List of functions for your rolling windows, such as mean, sd, min, max, quantile}

\item{statsNames}{The corresponding names to append to your colnames created associated with statsFuns}

\item{targets}{The column(s) in which you will build your lags and rolling stats}

\item{groupingVars}{Categorical variables you will build your lags and rolling stats by}

\item{sortDateName}{String name of your core date column in your transaction data}

\item{timeDiffTarget}{List a name in order to create time between events with assiciated lags and rolling features}

\item{timeAgg}{Unit of time to aggregate by}

\item{WindowingLag}{Build moving stats off of target column(s) or one of their lags (1+)}

\item{Type}{input "Lag" if you want features built on historical values; use "Lead" if you want features built on future values}

\item{Timer}{Set to TRUE if you want a time run for the operation; useful when there is grouping}

\item{SkipCols}{Defaults to NULL; otherwise name the vector containing the names of columns to skip}

\item{SimpleImpute}{Set to TRUE for factor level imputation of "0" and numeric imputation of -1}
}
\value{
data.table of original data plus newly created features
}
\description{
Builds autoregressive and rolling stats from target columns and distributed lags and distributed rolling stats for independent features distributed across time. On top of that, you can also create time between instances along with their associated lags and rolling stats. This function works for data with groups and without groups.
}
\examples{
# Grouping Case
N = 25116
data <- data.table(GroupVariable = sample(x = c(letters,
                                                LETTERS,
                                                paste0(letters,letters),
                                                paste0(LETTERS,LETTERS),
                                                paste0(letters,LETTERS),
                                                paste0(LETTERS,letters))),
                   DateTime = as.Date(Sys.time()),
                   Target = stats::filter(rnorm(N,
                                                mean = 50,
                                                sd = 20),
                                          filter=rep(1,10),
                                          circular=TRUE))
data[, temp := seq(1:N)][, DateTime := DateTime - temp][, temp := NULL]
data <- data[order(DateTime)]

# Non Grouping Case
N = 25116
data <- data.table(DateTime = as.Date(Sys.time()),
                   Target = stats::filter(rnorm(N,
                                                mean = 50,
                                                sd = 20),
                                          filter=rep(1,10),
                                          circular=TRUE))
data[, temp := seq(1:N)][, DateTime := DateTime - temp][, temp := NULL]
data <- data[order(DateTime)]
data <- GDL_Feature_Engineering(data,
           lags           = c(seq(1,5,1)),
           periods        = c(3,5,10,15,20,25),
           statsFUNs      = c(function(x) quantile(x, probs = 0.20, na.rm = TRUE),
                              function(x) quantile(x, probs = 0.80, na.rm = TRUE),
                              function(x) mean(x, na.rm = TRUE),
                              function(x) sd(x, na.rm = TRUE),
                              function(x) quantile(x, probs = 0.10, na.rm = TRUE),
                              function(x) quantile(x, probs = 0.90, na.rm = TRUE)),
           statsNames     = c("min","max","mean","sd","q20","q80"),
           targets        = c("Target"),
           groupingVars   = NULL,
           sortDateName   = "DateTime",
           timeDiffTarget = c("Time_Gap"),
           timeAgg        = "days",
           WindowingLag   = 1,
           Type           = "Lag",
           Timer          = TRUE,
           SkipCols       = FALSE,
           SimpleImpute   = TRUE)
}
\author{
Adrian Antico
}
