% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AutoMLChainLadderTrainer.R
\name{AutoCatBoostChainLadder}
\alias{AutoCatBoostChainLadder}
\title{AutoCatBoostChainLadder}
\usage{
AutoCatBoostChainLadder(
  data,
  PartitionRatios = c(0.7, 0.2, 0.1),
  BaseFunnelMeasure = NULL,
  ConversionMeasure = NULL,
  ConversionRateMeasure = NULL,
  CohortPeriodsVariable = NULL,
  CalendarDate = NULL,
  CohortDate = NULL,
  TimeUnit = c("day"),
  CalendarTimeGroups = c("day", "week", "month"),
  CohortTimeGroups = c("day", "week", "month"),
  TransformTargetVariable = TRUE,
  TransformMethods = c("Identity", "YeoJohnson"),
  AnomalyDetection = list(tstat_high = 3, tstat_low = -2),
  Jobs = c("Evaluate", "Train"),
  SaveModelObjects = TRUE,
  ModelID = "Segment_ID",
  ModelPath = NULL,
  MetaDataPath = NULL,
  TaskType = "CPU",
  NumGPUs = 1,
  DT_Threads = max(1L, parallel::detectCores()),
  EvaluationMetric = "RMSE",
  LossFunction = "RMSE",
  NumOfParDepPlots = 1L,
  MetricPeriods = 50L,
  CalendarVariables = c("wday", "mday", "yday", "week", "isoweek", "month", "quarter",
    "year"),
  HolidayGroups = c("USPublicHolidays", "EasterGroup", "ChristmasGroup",
    "OtherEcclesticalFeasts"),
  ImputeRollStats = -0.001,
  CohortHolidayLags = c(1L, 2L, 7L),
  CohortHolidayMovingAverages = c(3L, 7L),
  CalendarHolidayLags = c(1L, 2L, 7L),
  CalendarHolidayMovingAverages = c(3L, 7L),
  CalendarLags = list(day = c(1L, 7L, 21L), week = c(1L, 4L, 52L), month = c(1L, 6L,
    12L)),
  CalendarMovingAverages = list(day = c(1L, 7L, 21L), week = c(1L, 4L, 52L), month =
    c(1L, 6L, 12L)),
  CalendarStandardDeviations = NULL,
  CalendarSkews = NULL,
  CalendarKurts = NULL,
  CalendarQuantiles = NULL,
  CalendarQuantilesSelected = "q50",
  CohortLags = list(day = c(1L, 7L, 21L), week = c(1L, 4L, 52L), month = c(1L, 6L,
    12L)),
  CohortMovingAverages = list(day = c(1L, 7L, 21L), week = c(1L, 4L, 52L), month =
    c(1L, 6L, 12L)),
  CohortStandardDeviations = NULL,
  CohortSkews = NULL,
  CohortKurts = NULL,
  CohortQuantiles = NULL,
  CohortQuantilesSelected = "q50",
  PassInGrid = NULL,
  GridTune = FALSE,
  BaselineComparison = "default",
  MaxModelsInGrid = 25L,
  MaxRunMinutes = 180L,
  MaxRunsWithoutNewWinner = 10L,
  Trees = 3000L,
  Depth = seq(4L, 8L, 1L),
  LearningRate = seq(0.01, 0.1, 0.01),
  L2_Leaf_Reg = seq(1, 10, 1),
  RSM = c(0.8, 0.85, 0.9, 0.95, 1),
  BootStrapType = c("Bayesian", "Bernoulli", "Poisson", "MVS", "No"),
  GrowPolicy = c("SymmetricTree", "Depthwise", "Lossguide")
)
}
\arguments{
\item{data}{data object}

\item{PartitionRatios}{Requires three values for train, validation, and test data sets}

\item{BaseFunnelMeasure}{E.g. "Leads". This value should be a forward looking variable. Say you want to forecast ConversionMeasure 2 months into the future. You should have two months into the future of values of BaseFunnelMeasure}

\item{ConversionMeasure}{E.g. "Conversions". Rate is derived as conversions over leads by cohort periods out}

\item{ConversionRateMeasure}{Conversions over Leads for every cohort}

\item{CohortPeriodsVariable}{Numeric. Numerical value of the the number of periods since cohort base date.}

\item{CalendarDate}{The name of your date column that represents the calendar date}

\item{CohortDate}{The name of your date column that represents the cohort date}

\item{TimeUnit}{Base time unit of data. "days", "weeks", "months", "quarters", "years"}

\item{CalendarTimeGroups}{TimeUnit value must be included. If you want to generate lags and moving averages in several time based aggregations, choose from "days", "weeks", "months", "quarters", "years".}

\item{CohortTimeGroups}{TimeUnit value must be included. If you want to generate lags and moving averages in several time based aggregations, choose from "days", "weeks", "months", "quarters", "years".}

\item{TransformTargetVariable}{TRUE or FALSe}

\item{TransformMethods}{Choose from "Identity", "BoxCox", "Asinh", "Asin", "Log", "LogPlus1", "Logit", "YeoJohnson"}

\item{AnomalyDetection}{Provide a named list. See examples}

\item{Jobs}{Default is "eval" and "train"}

\item{SaveModelObjects}{Set to TRUE to return all modeling objects to your environment}

\item{ModelID}{A character string to name your model and output}

\item{ModelPath}{Path to where you want your models saved}

\item{MetaDataPath}{Path to where you want your metadata saved. If NULL, function will try ModelPath if it is not NULL.}

\item{TaskType}{"GPU" or "CPU" for catboost training}

\item{NumGPUs}{Number of GPU's you would like to utilize}

\item{DT_Threads}{Number of threads to use for data.table. Default is Total - 2}

\item{EvaluationMetric}{This is the metric used inside catboost to measure performance on validation data during a grid-tune. "RMSE" is the default, but other options include: "MAE", "MAPE", "Poisson", "Quantile", "LogLinQuantile", "Lq", "NumErrors", "SMAPE", "R2", "MSLE", "MedianAbsoluteError".}

\item{LossFunction}{Used in model training for model fitting. Select from 'RMSE', 'MAE', 'Quantile', 'LogLinQuantile', 'MAPE', 'Poisson', 'PairLogitPairwise', 'Tweedie', 'QueryRMSE'}

\item{NumOfParDepPlots}{Number of partial dependence plots to return}

\item{MetricPeriods}{Number of trees to build before the internal catboost eval step happens}

\item{CalendarVariables}{"wday", "mday", "yday", "week", "isoweek", "month", "quarter", "year"}

\item{HolidayGroups}{c("USPublicHolidays","EasterGroup","ChristmasGroup","OtherEcclesticalFeasts")}

\item{ImputeRollStats}{Constant value to fill NA after running AutoLagRollStats()}

\item{CohortHolidayLags}{c(1L, 2L, 7L),}

\item{CohortHolidayMovingAverages}{c(3L, 7L),}

\item{CalendarHolidayLags}{c(1L, 2L, 7L),}

\item{CalendarHolidayMovingAverages}{= c(3L, 7L),}

\item{CalendarLags}{List of the form list("day" = c(1L, 7L, 21L), "week" = c(1L, 4L, 52L), "month" = c(1L, 6L, 12L))}

\item{CalendarMovingAverages}{List of the form list("day" = c(1L, 7L, 21L), "week" = c(1L, 4L, 52L), "month" = c(1L, 6L, 12L))}

\item{CalendarStandardDeviations}{List of the form list("day" = c(1L, 7L, 21L), "week" = c(1L, 4L, 52L), "month" = c(1L, 6L, 12L))}

\item{CalendarSkews}{List of the form list("day" = c(1L, 7L, 21L), "week" = c(1L, 4L, 52L), "month" = c(1L, 6L, 12L))}

\item{CalendarKurts}{List of the form list("day" = c(1L, 7L, 21L), "week" = c(1L, 4L, 52L), "month" = c(1L, 6L, 12L))}

\item{CalendarQuantiles}{List of the form list("day" = c(1L, 7L, 21L), "week" = c(1L, 4L, 52L), "month" = c(1L, 6L, 12L))}

\item{CalendarQuantilesSelected}{Supply a vector of "q5", "q10", "q15", "q20", "q25", "q30", "q35", "q40", "q45", "q50", "q55", "q60", "q65", "q70", "q75", "q80", "q85", "q90", "q95"}

\item{CohortLags}{List of the form list("day" = c(1L, 7L, 21L), "week" = c(1L, 4L, 52L), "month" = c(1L, 6L, 12L))}

\item{CohortMovingAverages}{List of the form list("day" = c(1L, 7L, 21L), "week" = c(1L, 4L, 52L), "month" = c(1L, 6L, 12L))}

\item{CohortStandardDeviations}{List of the form list("day" = c(1L, 7L, 21L), "week" = c(1L, 4L, 52L), "month" = c(1L, 6L, 12L))}

\item{CohortSkews}{List of the form list("day" = c(1L, 7L, 21L), "week" = c(1L, 4L, 52L), "month" = c(1L, 6L, 12L))}

\item{CohortKurts}{List of the form list("day" = c(1L, 7L, 21L), "week" = c(1L, 4L, 52L), "month" = c(1L, 6L, 12L))}

\item{CohortQuantiles}{List of the form list("day" = c(1L, 7L, 21L), "week" = c(1L, 4L, 52L), "month" = c(1L, 6L, 12L))}

\item{CohortQuantilesSelected}{Supply a vector of "q5", "q10", "q15", "q20", "q25", "q30", "q35", "q40", "q45", "q50", "q55", "q60", "q65", "q70", "q75", "q80", "q85", "q90", "q95"}

\item{PassInGrid}{Defaults to NULL. Pass in a single row of grid from a previous output as a data.table (they are collected as data.tables)}

\item{GridTune}{Set to TRUE to run a grid tuning procedure. Set a number in MaxModelsInGrid to tell the procedure how many models you want to test.}

\item{BaselineComparison}{Set to either "default" or "best". Default is to compare each successive model build to the baseline model using max trees (from function args). Best makes the comparison to the current best model.}

\item{MaxModelsInGrid}{Number of models to test from grid options}

\item{MaxRunMinutes}{Maximum number of minutes to let this run}

\item{MaxRunsWithoutNewWinner}{Number of models built before calling it quits}

\item{Trees}{Bandit grid partitioned. The maximum number of trees you want in your models}

\item{Depth}{Bandit grid partitioned. Number, or vector for depth to test.  For running grid tuning, a NULL value supplied will mean these values are tested seq(4L, 16L, 2L)}

\item{LearningRate}{Bandit grid partitioned. Supply a single value for non-grid tuning cases. Otherwise, supply a vector for the LearningRate values to test. For running grid tuning, a NULL value supplied will mean these values are tested c(0.01,0.02,0.03,0.04)}

\item{L2_Leaf_Reg}{Random testing. Supply a single value for non-grid tuning cases. Otherwise, supply a vector for the L2_Leaf_Reg values to test. For running grid tuning, a NULL value supplied will mean these values are tested seq(1.0, 10.0, 1.0)}

\item{RSM}{CPU only. Random testing. Supply a single value for non-grid tuning cases. Otherwise, supply a vector for the RSM values to test. For running grid tuning, a NULL value supplied will mean these values are tested c(0.80, 0.85, 0.90, 0.95, 1.0)}

\item{BootStrapType}{Random testing. Supply a single value for non-grid tuning cases. Otherwise, supply a vector for the BootStrapType values to test. For running grid tuning, a NULL value supplied will mean these values are tested c("Bayesian", "Bernoulli", "Poisson", "MVS", "No")}

\item{GrowPolicy}{Random testing. NULL, character, or vector for GrowPolicy to test. For grid tuning, supply a vector of values. For running grid tuning, a NULL value supplied will mean these values are tested c("SymmetricTree", "Depthwise", "Lossguide")}

\item{TargetVariable}{Target Variable Name}

\item{MaxCohortPeriods}{The maximum number of CohortPeriodsVariable out to include in modeling}

\item{ReturnModelObjects}{Set to TRUE to output all modeling objects (E.g. plots and evaluation metrics)}
}
\value{
Saves metadata and models to files of your choice. Also returns metadata and models from the function. User specifies both options.
}
\description{
AutoCatBoostChainLadder is a forecasting model for chain ladder style forecasting
}
\examples{
\donttest{
# Create simulated data
data <- RemixAutoML::FakeDataGenerator(ChainLadderData = TRUE)

# Build model
RemixAutoML::AutoCatBoostChainLadder(

   # Data Arguments----
   data = data,
   PartitionRatios = c(0.70,0.20,0.10),
   BaseFunnelMeasure = "Leads",
   ConversionMeasure = "Appointments",
   ConversionRateMeasure = NULL,
   CohortPeriodsVariable = "CohortDays",
   CalendarDate = "CalendarDateColumn",
   CohortDate = "CohortDateColumn",
   TimeUnit = "days",
   TransformTargetVariable = TRUE,
   TransformMethods = c("Identity","BoxCox","Asinh","Asin","LogPlus1","Logit","YeoJohnson"),
   AnomalyDetection = list(tstat_high = 3, tstat_low = -2),
   
   # MetaData Arguments----
   Jobs = c("eval","train"),
   SaveModelObjects = TRUE,
   ModelID = "ModelTest",
   ModelPath = getwd(),
   MetaDataPath = NULL,
   TaskType = "GPU",
   NumGPUs = 1,
   DT_Threads = max(1L, parallel::detectCores() - 2L),
   EvaluationMetric = "RMSE",
   LossFunction = "RMSE",
   NumOfParDepPlots = 1L,
   MetricPeriods = 50L,
   
   # Feature Engineering Arguments----
   ImputeRollStats = -0.001,
   CalendarTimeGroups = c("days","weeks","months"),
   CohortTimeGroups = c("days", "weeks"),
   CalendarVariables = c("wday","mday","yday","week","month","quarter","year"),
   HolidayGroups = c("USPublicHolidays","EasterGroup","ChristmasGroup","OtherEcclesticalFeasts"),
   CohortHolidayLags = c(1L,2L,7L),
   CohortHolidayMovingAverages = c(3L,7L),
   CalendarHolidayLags = c(1L,2L,7L),
   CalendarHolidayMovingAverages = c(3L,7L),
   CalendarLags = list("day" = c(1L,2L,7L,35L,42L), "week" = c(5L,6L,10L,12L,25L,26L)),
   CalendarMovingAverages = list("day" = c(7L,14L,35L,42L), "week" = c(5L,6L,10L,12L,20L,24L), "month" = c(6L,12L)),
   CalendarStandardDeviations = NULL,
   CalendarSkews = NULL,
   CalendarKurts = NULL,
   CalendarQuantiles = NULL,
   CalendarQuantilesSelected = "q50",
   CohortLags = list("day" = c(1L,2L,7L,35L,42L), "week" = c(5L,6L)),
   CohortMovingAverages = list("day" = c(7L,14L,35L,42L), "week" = c(5L,6L), "month" = c(1L,2L)),
   CohortStandardDeviations = NULL,
   CohortSkews = NULL,
   CohortKurts = NULL,
   CohortQuantiles = NULL,
   CohortQuantilesSelected = "q50",
   
   # Grid Tuning
   PassInGrid = NULL,
   GridTune = FALSE,
   BaselineComparison = "default",
   MaxModelsInGrid = 25L,
   MaxRunMinutes = 180L,
   MaxRunsWithoutNewWinner = 10L,
   Trees = 1000L,
   Depth = seq(4L,8L,1L),
   LearningRate = seq(0.01,0.10,0.01),
   L2_Leaf_Reg = seq(1.0,10.0,1.0),
   RSM = c(0.80,0.85,0.90,0.95,1.0),
   BootStrapType = c("Bayesian","Bernoulli","Poisson","MVS","No"),
   GrowPolicy = c("SymmetricTree","Depthwise","Lossguide"))
}
}
\seealso{
Other Automated Time Series: 
\code{\link{AutoCatBoostCARMA}()},
\code{\link{AutoCatBoostFreqSizeScoring}()},
\code{\link{AutoCatBoostSizeFreqDist}()},
\code{\link{AutoH2oDRFCARMA}()},
\code{\link{AutoH2oGBMCARMA}()},
\code{\link{AutoH2oGBMFreqSizeScoring}()},
\code{\link{AutoH2oGBMSizeFreqDist}()},
\code{\link{AutoH2oGLMCARMA}()},
\code{\link{AutoH2oMLCARMA}()},
\code{\link{AutoTS}()},
\code{\link{AutoXGBoostCARMA}()},
\code{\link{IntermittentDemandScoringDataGenerator}()}
}
\author{
Adrian Antico
}
\concept{Automated Time Series}
