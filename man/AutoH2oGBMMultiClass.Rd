% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AutoH2oGBMMultiClass.R
\name{AutoH2oGBMMultiClass}
\alias{AutoH2oGBMMultiClass}
\title{AutoH2oGBMMultiClass is an automated H2O modeling framework with grid-tuning and model evaluation}
\usage{
AutoH2oGBMMultiClass(data, ValidationData = NULL, TestData = NULL,
  TargetColumnName = NULL, FeatureColNames = NULL,
  eval_metric = "logloss", Trees = 50, GridTune = FALSE,
  MaxMem = "32G", MaxModelsInGrid = 2, model_path = NULL,
  ModelID = "FirstModel", ReturnModelObjects = TRUE,
  SaveModelObjects = FALSE, IfSaveModel = "mojo",
  H2OShutdown = FALSE)
}
\arguments{
\item{data}{This is your data set for training and testing your model}

\item{ValidationData}{This is your holdout data set used in modeling either refine your hyperparameters.}

\item{TestData}{This is your holdout data set. Catboost using both training and validation data in the training process so you should evaluate out of sample performance with this data set.}

\item{TargetColumnName}{Either supply the target column name OR the column number where the target is located (but not mixed types).}

\item{FeatureColNames}{Either supply the feature column names OR the column number where the target is located (but not mixed types)}

\item{eval_metric}{This is the metric used to identify best grid tuned model. Choose from "logloss", "r2", "RMSE", "MSE"}

\item{Trees}{The maximum number of trees you want in your models}

\item{GridTune}{Set to TRUE to run a grid tuning procedure. Set a number in MaxModelsInGrid to tell the procedure how many models you want to test.}

\item{MaxMem}{Set the maximum amount of memory you'd like to dedicate to the model run. E.g. "32G"}

\item{MaxModelsInGrid}{Number of models to test from grid options (1080 total possible options)}

\item{model_path}{A character string of your path file to where you want your output saved}

\item{ModelID}{A character string to name your model and output}

\item{ReturnModelObjects}{Set to TRUE to output all modeling objects (E.g. plots and evaluation metrics)}

\item{SaveModelObjects}{Set to TRUE to return all modeling objects to your environment}

\item{IfSaveModel}{Set to "mojo" to save a mojo file, otherwise "standard" to save a regular H2O model object}

\item{H2OShutdown}{Set to TRUE to shutdown H2O when done with function}
}
\value{
Saves to file and returned in list: VariableImportance.csv, Model, ValidationData.csv, EvaluationMetrics.csv, GridCollect, and GridList
}
\description{
AutoH2oGBMMultiClass is an automated H2O modeling framework with grid-tuning and model evaluation that runs a variety of steps. First, a stratified sampling (by the target variable) is done to create train and validation sets. Then, the function will run a random grid tune over N number of models and find which model is the best (a default model is always included in that set). Once the model is identified and built, several other outputs are generated: validation data with predictions, evaluation metrics, confusion matrix, and variable importance.
}
\examples{
\donttest{
Correl <- 0.85
N <- 1000
data <- data.table::data.table(Target = runif(N))
data[, x1 := qnorm(Target)]
data[, x2 := runif(N)]
data[, Independent_Variable1 := log(pnorm(Correl * x1 +
                                            sqrt(1-Correl^2) * qnorm(x2)))]
data[, Independent_Variable2 := (pnorm(Correl * x1 +
                                         sqrt(1-Correl^2) * qnorm(x2)))]
data[, Independent_Variable3 := exp(pnorm(Correl * x1 +
                                            sqrt(1-Correl^2) * qnorm(x2)))]
data[, Independent_Variable4 := exp(exp(pnorm(Correl * x1 +
                                                sqrt(1-Correl^2) * qnorm(x2))))]
data[, Independent_Variable5 := sqrt(pnorm(Correl * x1 +
                                             sqrt(1-Correl^2) * qnorm(x2)))]
data[, Independent_Variable6 := (pnorm(Correl * x1 +
                                         sqrt(1-Correl^2) * qnorm(x2)))^0.10]
data[, Independent_Variable7 := (pnorm(Correl * x1 +
                                         sqrt(1-Correl^2) * qnorm(x2)))^0.25]
data[, Independent_Variable8 := (pnorm(Correl * x1 +
                                         sqrt(1-Correl^2) * qnorm(x2)))^0.75]
data[, Independent_Variable9 := (pnorm(Correl * x1 +
                                         sqrt(1-Correl^2) * qnorm(x2)))^2]
data[, Independent_Variable10 := (pnorm(Correl * x1 +
                                          sqrt(1-Correl^2) * qnorm(x2)))^4]
data[, Independent_Variable11 := as.factor(
  ifelse(Independent_Variable2 < 0.20, "A",
         ifelse(Independent_Variable2 < 0.40, "B",
                ifelse(Independent_Variable2 < 0.6,  "C",
                       ifelse(Independent_Variable2 < 0.8,  "D", "E")))))]
data[, Target :=
ifelse(Independent_Variable2 < 0.25, "A",
       ifelse(Independent_Variable2 < 0.45, "B",
              ifelse(Independent_Variable2 < 0.65, "C",
                     ifelse(Independent_Variable2 < 0.85,  "D", "E"))))]
data[, ':=' (x1 = NULL, x2 = NULL)]
TestModel <- AutoH2oGBMMultiClass(data,
                                  ValidationData = NULL,
                                  TestData = NULL,
                                  TargetColumnName = "Target",
                                  FeatureColNames = 2:ncol(data),
                                  eval_metric = "logloss",
                                  Trees = 50,
                                  GridTune = FALSE,
                                  MaxMem = "32G",
                                  MaxModelsInGrid = 10,
                                  model_path = NULL,
                                  ModelID = "FirstModel",
                                  ReturnModelObjects = TRUE,
                                  SaveModelObjects = FALSE,
                                  IfSaveModel = "mojo",
                                  H2OShutdown = FALSE)
}
}
\seealso{
Other Supervised Learning: \code{\link{AutoCatBoostClassifier}},
  \code{\link{AutoCatBoostMultiClass}},
  \code{\link{AutoCatBoostRegression}},
  \code{\link{AutoCatBoostScoring}},
  \code{\link{AutoCatBoostdHurdleModel}},
  \code{\link{AutoH2OMLScoring}},
  \code{\link{AutoH2OModeler}},
  \code{\link{AutoH2OScoring}},
  \code{\link{AutoH2oDRFClassifier}},
  \code{\link{AutoH2oDRFHurdleModel}},
  \code{\link{AutoH2oDRFMultiClass}},
  \code{\link{AutoH2oDRFRegression}},
  \code{\link{AutoH2oGBMClassifier}},
  \code{\link{AutoH2oGBMHurdleModel}},
  \code{\link{AutoH2oGBMRegression}},
  \code{\link{AutoNLS}},
  \code{\link{AutoXGBoostClassifier}},
  \code{\link{AutoXGBoostHurdleModel}},
  \code{\link{AutoXGBoostMultiClass}},
  \code{\link{AutoXGBoostRegression}},
  \code{\link{AutoXGBoostScoring}}
}
\author{
Adrian Antico
}
\concept{Supervised Learning}
