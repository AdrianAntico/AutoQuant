% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AutoLightGBMRegression.R
\name{AutoLightGBMRegression}
\alias{AutoLightGBMRegression}
\title{AutoLightGBMRegression}
\usage{
AutoLightGBMRegression(
  data = NULL,
  TrainOnFull = FALSE,
  ValidationData = NULL,
  TestData = NULL,
  TargetColumnName = NULL,
  FeatureColNames = NULL,
  PrimaryDateColumn = NULL,
  WeightsColumnName = NULL,
  IDcols = NULL,
  OutputSelection = c("Importances", "EvalMetrics", "Score_TrainData"),
  model_path = NULL,
  metadata_path = NULL,
  DebugMode = FALSE,
  SaveInfoToPDF = FALSE,
  ModelID = "TestModel",
  ReturnFactorLevels = TRUE,
  ReturnModelObjects = TRUE,
  SaveModelObjects = FALSE,
  EncodingMethod = "credibility",
  TransformNumericColumns = NULL,
  Methods = c("Asinh", "Log", "LogPlus1", "Sqrt", "Asin", "Logit"),
  Verbose = 0L,
  NumOfParDepPlots = 3L,
  GridTune = FALSE,
  grid_eval_metric = "r2",
  BaselineComparison = "default",
  MaxModelsInGrid = 10L,
  MaxRunsWithoutNewWinner = 20L,
  MaxRunMinutes = 24L * 60L,
  PassInGrid = NULL,
  input_model = NULL,
  task = "train",
  device_type = "CPU",
  NThreads = parallel::detectCores()/2,
  objective = "regression",
  metric = "rmse",
  boosting = "gbdt",
  LinearTree = FALSE,
  Trees = 50L,
  eta = NULL,
  num_leaves = 31,
  deterministic = TRUE,
  force_col_wise = FALSE,
  force_row_wise = FALSE,
  max_depth = NULL,
  min_data_in_leaf = 20,
  min_sum_hessian_in_leaf = 0.001,
  bagging_freq = 0,
  bagging_fraction = 1,
  feature_fraction = 1,
  feature_fraction_bynode = 1,
  extra_trees = FALSE,
  early_stopping_round = 10,
  first_metric_only = TRUE,
  max_delta_step = 0,
  lambda_l1 = 0,
  lambda_l2 = 0,
  linear_lambda = 0,
  min_gain_to_split = 0,
  drop_rate_dart = 0.1,
  max_drop_dart = 50,
  skip_drop_dart = 0.5,
  uniform_drop_dart = FALSE,
  top_rate_goss = FALSE,
  other_rate_goss = FALSE,
  monotone_constraints = NULL,
  monotone_constraints_method = "advanced",
  monotone_penalty = 0,
  forcedsplits_filename = NULL,
  refit_decay_rate = 0.9,
  path_smooth = 0,
  max_bin = 255,
  min_data_in_bin = 3,
  data_random_seed = 1,
  is_enable_sparse = TRUE,
  enable_bundle = TRUE,
  use_missing = TRUE,
  zero_as_missing = FALSE,
  two_round = FALSE,
  convert_model = NULL,
  convert_model_language = "cpp",
  boost_from_average = TRUE,
  alpha = 0.9,
  fair_c = 1,
  poisson_max_delta_step = 0.7,
  tweedie_variance_power = 1.5,
  lambdarank_truncation_level = 30,
  is_provide_training_metric = TRUE,
  eval_at = c(1, 2, 3, 4, 5),
  num_machines = 1,
  gpu_platform_id = -1,
  gpu_device_id = -1,
  gpu_use_dp = TRUE,
  num_gpu = 1
)
}
\arguments{
\item{data}{This is your data set for training and testing your model}

\item{TrainOnFull}{Set to TRUE to train on full data}

\item{ValidationData}{This is your holdout data set used in modeling either refine your hyperparameters.}

\item{TestData}{This is your holdout data set.}

\item{TargetColumnName}{Either supply the target column name OR the column number where the target is located (but not mixed types).}

\item{FeatureColNames}{Either supply the feature column names OR the column number where the target is located (but not mixed types)}

\item{PrimaryDateColumn}{Supply a date or datetime column for catboost to utilize time as its basis for handling categorical features, instead of random shuffling}

\item{WeightsColumnName}{Supply a column name for your weights column. Leave NULL otherwise}

\item{IDcols}{A vector of column names or column numbers to keep in your data but not include in the modeling.}

\item{OutputSelection}{You can select what type of output you want returned. Choose from c('Importances', 'EvalMetrics', 'Score_TrainData')}

\item{model_path}{A character string of your path file to where you want your output saved}

\item{metadata_path}{A character string of your path file to where you want your model evaluation output saved. If left NULL, all output will be saved to model_path.}

\item{DebugMode}{Set to TRUE to get a print out of the steps taken throughout the function}

\item{SaveInfoToPDF}{Set to TRUE to save model insights to pdf}

\item{ModelID}{A character string to name your model and output}

\item{ReturnFactorLevels}{Set to TRUE to have the factor levels returned with the other model objects}

\item{ReturnModelObjects}{Set to TRUE to output all modeling objects (E.g. plots and evaluation metrics)}

\item{SaveModelObjects}{Set to TRUE to return all modeling objects to your environment}

\item{EncodingMethod}{Choose from 'binary', 'm_estimator', 'credibility', 'woe', 'target_encoding', 'poly_encode', 'backward_difference', 'helmert'}

\item{TransformNumericColumns}{Set to NULL to do nothing; otherwise supply the column names of numeric variables you want transformed}

\item{Methods}{Choose from 'BoxCox', 'Asinh', 'Asin', 'Log', 'LogPlus1', 'Sqrt', 'Logit', 'YeoJohnson'. Function will determine if one cannot be used because of the underlying data.}

\item{Verbose}{Set to 0 if you want to suppress model evaluation updates in training}

\item{NumOfParDepPlots}{Tell the function the number of partial dependence calibration plots you want to create.}

\item{GridTune}{Set to TRUE to run a grid tuning procedure. Set a number in MaxModelsInGrid to tell the procedure how many models you want to test.}

\item{grid_eval_metric}{'mae', 'mape', 'rmse', 'r2'. Case sensitive}

\item{BaselineComparison}{Set to either 'default' or 'best'. Default is to compare each successive model build to the baseline model using max trees (from function args). Best makes the comparison to the current best model.}

\item{MaxModelsInGrid}{Number of models to test from grid options (243 total possible options)}

\item{MaxRunsWithoutNewWinner}{Runs without new winner to end procedure}

\item{MaxRunMinutes}{In minutes}

\item{PassInGrid}{Default is NULL. Provide a data.table of grid options from a previous run.}

\item{input_model}{= NULL, # continue training a model that is stored to fil

# Core parameters https://lightgbm.readthedocs.io/en/latest/Parameters.html#core-parameter}

\item{task}{'train' or 'refit'}

\item{device_type}{'cpu' or 'gpu'}

\item{NThreads}{only list up to number of cores, not threads. parallel::detectCores() / 2}

\item{objective}{'regression' (or 'mean_squared_error'), 'regression_l1' (or 'mean_absolute_error'), 'mae' (or 'mean_absolute_percentage_error'), 'huber', 'fair', 'poisson', 'quantile', 'gamma', 'tweedie'}

\item{metric}{'rmse', 'l1', 'l2', 'quantile', 'mape', 'huber', 'fair', 'poisson', 'gamma', 'gamma_deviance', 'tweedie', 'ndcg'}

\item{boosting}{'gbdt', 'rf', 'dart', 'goss'}

\item{LinearTree}{FALSE}

\item{Trees}{50L}

\item{eta}{NULL}

\item{num_leaves}{31}

\item{deterministic}{TRUE

# Learning Parameters https://lightgbm.readthedocs.io/en/latest/Parameters.html#learning-control-parameter}

\item{force_col_wise}{FALSE}

\item{force_row_wise}{FALSE}

\item{max_depth}{NULL}

\item{min_data_in_leaf}{20}

\item{min_sum_hessian_in_leaf}{0.001}

\item{bagging_freq}{0}

\item{bagging_fraction}{1.0}

\item{feature_fraction}{1.0}

\item{feature_fraction_bynode}{1.0}

\item{extra_trees}{FALSE}

\item{early_stopping_round}{10}

\item{first_metric_only}{TRUE}

\item{max_delta_step}{0.0}

\item{lambda_l1}{0.0}

\item{lambda_l2}{0.0}

\item{linear_lambda}{0.0}

\item{min_gain_to_split}{0}

\item{drop_rate_dart}{0.10}

\item{max_drop_dart}{50}

\item{skip_drop_dart}{0.50}

\item{uniform_drop_dart}{FALSE}

\item{top_rate_goss}{FALSE}

\item{other_rate_goss}{FALSE}

\item{monotone_constraints}{NULL, 'gbdt_prediction.cpp'}

\item{monotone_constraints_method}{'advanced'}

\item{monotone_penalty}{0.0}

\item{forcedsplits_filename}{NULL # use for AutoStack option; .json fil}

\item{refit_decay_rate}{0.90}

\item{path_smooth}{0.0

# IO Dataset Parameters https://lightgbm.readthedocs.io/en/latest/Parameters.html#io-parameters}

\item{max_bin}{255}

\item{min_data_in_bin}{3}

\item{data_random_seed}{1}

\item{is_enable_sparse}{TRUE}

\item{enable_bundle}{TRUE}

\item{use_missing}{TRUE}

\item{zero_as_missing}{FALSE}

\item{two_round}{FALSE

# Convert Parameters # https://lightgbm.readthedocs.io/en/latest/Parameters.html#convert-parameters}

\item{convert_model}{'gbdt_prediction.cpp'}

\item{convert_model_language}{'cpp'

# Objective Parameters https://lightgbm.readthedocs.io/en/latest/Parameters.html#objective-parameters}

\item{boost_from_average}{TRUE}

\item{alpha}{0.90}

\item{fair_c}{1.0}

\item{poisson_max_delta_step}{0.70}

\item{tweedie_variance_power}{1.5}

\item{lambdarank_truncation_level}{30

# Metric Parameters (metric is in Core)}

\item{is_provide_training_metric}{TRUE}

\item{eval_at}{c(1,2,3,4,5)

# Network Parameter}

\item{num_machines}{1

# GPU Parameter}

\item{gpu_platform_id}{-1}

\item{gpu_device_id}{-1}

\item{gpu_use_dp}{TRUE}

\item{num_gpu}{1}
}
\value{
Saves to file and returned in list: VariableImportance.csv, Model, ValidationData.csv, EvalutionPlot.png, EvalutionBoxPlot.png, EvaluationMetrics.csv, ParDepPlots.R a named list of features with partial dependence calibration plots, ParDepBoxPlots.R, GridCollect, and GridList
}
\description{
AutoLightGBMRegression is an automated lightgbm modeling framework with grid-tuning and model evaluation that runs a variety of steps. First, the function will run a random grid tune over N number of models and find which model is the best (a default model is always included in that set). Once the model is identified and built, several other outputs are generated: validation data with predictions, evaluation plot, evaluation boxplot, evaluation metrics, variable importance, partial dependence calibration plots, partial dependence calibration box plots, and column names used in model fitting.
}
\examples{
\dontrun{
# Create some dummy correlated data
data <- AutoQuant::FakeDataGenerator(
  Correlation = 0.85,
  N = 1000,
  ID = 2,
  ZIP = 0,
  AddDate = FALSE,
  Classification = FALSE,
  MultiClass = FALSE)

# Run function
TestModel <- AutoQuant::AutoLightGBMRegression(

  # Metadata args
  OutputSelection = c('Importances','EvalMetrics','Score_TrainData'),
  model_path = normalizePath('./'),
  metadata_path = NULL,
  ModelID = 'Test_Model_1',
  NumOfParDepPlots = 3L,
  EncodingMethod = 'credibility',
  ReturnFactorLevels = TRUE,
  ReturnModelObjects = TRUE,
  SaveModelObjects = FALSE,
  SaveInfoToPDF = FALSE,
  DebugMode = FALSE,

  # Data args
  data = data,
  TrainOnFull = FALSE,
  ValidationData = NULL,
  TestData = NULL,
  TargetColumnName = 'Adrian',
  FeatureColNames = names(data)[!names(data) \%in\% c('IDcol_1', 'IDcol_2','Adrian')],
  PrimaryDateColumn = NULL,
  WeightsColumnName = NULL,
  IDcols = c('IDcol_1','IDcol_2'),
  TransformNumericColumns = NULL,
  Methods = c('Asinh','Asin','Log','LogPlus1','Sqrt','Logit'),

  # Grid parameters
  GridTune = FALSE,
  grid_eval_metric = 'r2',
  BaselineComparison = 'default',
  MaxModelsInGrid = 10L,
  MaxRunsWithoutNewWinner = 20L,
  MaxRunMinutes = 24L*60L,
  PassInGrid = NULL,

  # Core parameters
  # https://lightgbm.readthedocs.io/en/latest/Parameters.html#core-parameters
  input_model = NULL, # continue training a model that is stored to file
  task = 'train',
  device_type = 'CPU',
  NThreads = parallel::detectCores() / 2,
  objective = 'regression',
  metric = 'rmse',
  boosting = 'gbdt',
  LinearTree = FALSE,
  Trees = 50L,
  eta = NULL,
  num_leaves = 31,
  deterministic = TRUE,

  # Learning Parameters
  # https://lightgbm.readthedocs.io/en/latest/Parameters.html#learning-control-parameters
  force_col_wise = FALSE,
  force_row_wise = FALSE,
  max_depth = NULL,
  min_data_in_leaf = 20,
  min_sum_hessian_in_leaf = 0.001,
  bagging_freq = 0,
  bagging_fraction = 1.0,
  feature_fraction = 1.0,
  feature_fraction_bynode = 1.0,
  extra_trees = FALSE,
  early_stopping_round = 10,
  first_metric_only = TRUE,
  max_delta_step = 0.0,
  lambda_l1 = 0.0,
  lambda_l2 = 0.0,
  linear_lambda = 0.0,
  min_gain_to_split = 0,
  drop_rate_dart = 0.10,
  max_drop_dart = 50,
  skip_drop_dart = 0.50,
  uniform_drop_dart = FALSE,
  top_rate_goss = FALSE,
  other_rate_goss = FALSE,
  monotone_constraints = NULL,
  monotone_constraints_method = 'advanced',
  monotone_penalty = 0.0,
  forcedsplits_filename = NULL, # use for AutoStack option; .json file
  refit_decay_rate = 0.90,
  path_smooth = 0.0,

  # IO Dataset Parameters
  # https://lightgbm.readthedocs.io/en/latest/Parameters.html#io-parameters
  max_bin = 255,
  min_data_in_bin = 3,
  data_random_seed = 1,
  is_enable_sparse = TRUE,
  enable_bundle = TRUE,
  use_missing = TRUE,
  zero_as_missing = FALSE,
  two_round = FALSE,

  # Convert Parameters
  convert_model = NULL,
  convert_model_language = 'cpp',

  # Objective Parameters
  # https://lightgbm.readthedocs.io/en/latest/Parameters.html#objective-parameters
  boost_from_average = TRUE,
  alpha = 0.90,
  fair_c = 1.0,
  poisson_max_delta_step = 0.70,
  tweedie_variance_power = 1.5,
  lambdarank_truncation_level = 30,

  # Metric Parameters (metric is in Core)
  # https://lightgbm.readthedocs.io/en/latest/Parameters.html#metric-parameters
  is_provide_training_metric = TRUE,
  eval_at = c(1,2,3,4,5),

  # Network Parameters
  # https://lightgbm.readthedocs.io/en/latest/Parameters.html#network-parameters
  num_machines = 1,

  # GPU Parameters
  # https://lightgbm.readthedocs.io/en/latest/Parameters.html#gpu-parameters
  gpu_platform_id = -1,
  gpu_device_id = -1,
  gpu_use_dp = TRUE,
  num_gpu = 1)
}
}
\seealso{
Other Automated Supervised Learning - Regression: 
\code{\link{AutoCatBoostRegression}()},
\code{\link{AutoH2oDRFRegression}()},
\code{\link{AutoH2oGAMRegression}()},
\code{\link{AutoH2oGBMRegression}()},
\code{\link{AutoH2oGLMRegression}()},
\code{\link{AutoH2oMLRegression}()},
\code{\link{AutoXGBoostRegression}()}
}
\author{
Adrian Antico
}
\concept{Automated Supervised Learning - Regression}
