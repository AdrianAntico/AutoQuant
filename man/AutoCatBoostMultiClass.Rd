% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AutoCatBoostMultiClass.R
\name{AutoCatBoostMultiClass}
\alias{AutoCatBoostMultiClass}
\title{AutoCatBoostMultiClass is an automated catboost model grid-tuning multinomial classifier and evaluation system}
\usage{
AutoCatBoostMultiClass(data, TrainOnFull = FALSE,
  ValidationData = NULL, TestData = NULL, TargetColumnName = NULL,
  FeatureColNames = NULL, PrimaryDateColumn = NULL,
  ClassWeights = NULL, IDcols = NULL, task_type = "GPU",
  eval_metric = "MultiClassOneVsAll", Trees = 50, GridTune = FALSE,
  grid_eval_metric = "Accuracy", MaxModelsInGrid = 10,
  model_path = NULL, metadata_path = NULL, ModelID = "FirstModel",
  ReturnModelObjects = TRUE, SaveModelObjects = FALSE,
  PassInGrid = NULL)
}
\arguments{
\item{data}{This is your data set for training and testing your model}

\item{TrainOnFull}{Set to TRUE to train on full data and skip over evaluation steps}

\item{ValidationData}{This is your holdout data set used in modeling either refine your hyperparameters. Catboost using both training and validation data in the training process so you should evaluate out of sample performance with this data set.}

\item{TestData}{This is your holdout data set. Catboost using both training and validation data in the training process so you should evaluate out of sample performance with this data set.}

\item{TargetColumnName}{Either supply the target column name OR the column number where the target is located, but not mixed types. Note that the target column needs to be a 0 | 1 numeric variable.}

\item{FeatureColNames}{Either supply the feature column names OR the column number where the target is located, but not mixed types. Also, not zero-indexed.}

\item{PrimaryDateColumn}{Supply a date or datetime column for catboost to utilize time as its basis for handling categorical features, instead of random shuffling}

\item{ClassWeights}{Supply a vector of weights for your target classes. E.g. c(0.25, 1) to weight your 0 class by 0.25 and your 1 class by 1.}

\item{IDcols}{A vector of column names or column numbers to keep in your data but not include in the modeling.}

\item{task_type}{Set to "GPU" to utilize your GPU for training. Default is "CPU".}

\item{eval_metric}{This is the metric used inside catboost to measure performance on validation data during a grid-tune. MultiClass or MultiClassOneVsAll}

\item{Trees}{Bandit grid partioned. Supply a single value for non-grid tuning cases. Otherwise, supply a vector for the trees numbers you want to test. For running grid tuning, a NULL value supplied will mean these values are tested seq(1000L, 10000L, 1000L)}

\item{GridTune}{Set to TRUE to run a grid tuning procedure. Set a number in MaxModelsInGrid to tell the procedure how many models you want to test.}

\item{grid_eval_metric}{For evaluating models within grid tuning. Choices include, "accuracy", "microauc", "logloss"}

\item{MaxModelsInGrid}{Number of models to test from grid options.}

\item{model_path}{A character string of your path file to where you want your output saved}

\item{metadata_path}{A character string of your path file to where you want your model evaluation output saved. If left NULL, all output will be saved to model_path.}

\item{ModelID}{A character string to name your model and output}

\item{ReturnModelObjects}{Set to TRUE to output all modeling objects. E.g. plots and evaluation metrics}

\item{SaveModelObjects}{Set to TRUE to return all modeling objects to your environment}

\item{PassInGrid}{Defaults to NULL. Pass in a single row of grid from a previous output as a data.table (they are collected as data.tables)}

\item{NumOfParDepPlots}{Tell the function the number of partial dependence calibration plots you want to create. Calibration boxplots will only be created for numerical features (not dummy variables)}

\item{MaxRunsWithoutNewWinner}{A number}

\item{MaxRunMinutes}{In minutes}

\item{Shuffles}{Numeric. List a number to let the program know how many times you want to shuffle the grids for grid tuning}

\item{BaselineComparison}{Set to either "default" or "best". Default is to compare each successive model build to the baseline model using max trees (from function args). Best makes the comparison to the current best model.}

\item{MetricPeriods}{Number of trees to build before evaluating intermediate metrics. Default is 10L}

\item{Depth}{Bandit gartioned. Number, or vector for depth to test.  For running grid tuning, a NULL value supplied will mean these values are tested seq(4L, 16L, 2L)}

\item{LearningRate}{Bandit grid partioned. Supply a single value for non-grid tuning cases. Otherwise, supply a vector for the LearningRate values to test. For running grid tuning, a NULL value supplied will mean these values are tested c(0.01,0.02,0.03,0.04)}

\item{L2_Leaf_Reg}{Random testing. Supply a single value for non-grid tuning cases. Otherwise, supply a vector for the L2_Leaf_Reg values to test. For running grid tuning, a NULL value supplied will mean these values are tested seq(1.0, 10.0, 1.0)}

\item{RSM}{CPU only. Random testing. Supply a single value for non-grid tuning cases. Otherwise, supply a vector for the RSM values to test. For running grid tuning, a NULL value supplied will mean these values are tested c(0.80, 0.85, 0.90, 0.95, 1.0)}

\item{BootStrapType}{Random testing. Supply a single value for non-grid tuning cases. Otherwise, supply a vector for the BootStrapType values to test. For running grid tuning, a NULL value supplied will mean these values are tested c("Bayesian", "Bernoulli", "Poisson", "MVS", "No")}

\item{GrowPolicy}{Random testing. NULL, character, or vector for GrowPolicy to test. For grid tuning, supply a vector of values. For running grid tuning, a NULL value supplied will mean these values are tested c("SymmetricTree", "Depthwise", "Lossguide")}
}
\value{
Saves to file and returned in list: VariableImportance.csv, Model (the model), ValidationData.csv, EvaluationMetrics.csv, GridCollect, and GridList
}
\description{
AutoCatBoostMultiClass is an automated modeling function that runs a variety of steps. First, a stratified sampling (by the target variable) is done to create train and validation sets. Then, the function will run a random grid tune over N number of models and find which model is the best (a default model is always included in that set). Once the model is identified and built, several other outputs are generated: validation data with predictions, evaluation metrics, variable importance, and column names used in model fitting. You can download the catboost package using devtools, via: devtools::install_github('catboost/catboost', subdir = 'catboost/R-package').
}
\examples{
\donttest{
Correl <- 0.85
N <- 1000
data <- data.table::data.table(Adrian = runif(N))
data[, x1 := qnorm(Adrian)]
data[, x2 := runif(N)]
data[, Independent_Variable1 := log(pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2)))]
data[, Independent_Variable2 := (pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2)))]
data[, Independent_Variable3 := exp(pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2)))]
data[, Independent_Variable4 := exp(exp(pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2))))]
data[, Independent_Variable5 := sqrt(pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2)))]
data[, Independent_Variable6 := (pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2)))^0.10]
data[, Independent_Variable7 := (pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2)))^0.25]
data[, Independent_Variable8 := (pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2)))^0.75]
data[, Independent_Variable9 := (pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2)))^2]
data[, Independent_Variable10 := (pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2)))^4]
data[, Adrian := as.factor(
  ifelse(Independent_Variable2 < 0.20, "A",
         ifelse(Independent_Variable2 < 0.40, "B",
                ifelse(Independent_Variable2 < 0.6,  "C",
                       ifelse(Independent_Variable2 < 0.8,  "D", "E")))))]
data[, ':=' (x1 = NULL, x2 = NULL)]
TestModel <- AutoCatBoostMultiClass(data,
                                    TrainOnFull = FALSE,
                                    ValidationData = NULL,
                                    TestData = NULL,
                                    TargetColumnName = "Adrian",
                                    FeatureColNames = c(2:11),
                                    PrimaryDateColumn = NULL,
                                    ClassWeights = NULL,
                                    IDcols = NULL,
                                    MaxModelsInGrid = 1,
                                    task_type = "GPU",
                                    eval_metric = "MultiClass",
                                    grid_eval_metric = "Accuracy",
                                    Trees = 50,
                                    GridTune = FALSE,
                                    model_path = NULL,
                                    metadata_path = NULL,
                                    ModelID = "ModelTest",
                                    ReturnModelObjects = TRUE,
                                    SaveModelObjects = FALSE,
                                    PassInGrid = NULL)
}
}
\seealso{
Other Automated MultiClass Classification: \code{\link{AutoH2oDRFMultiClass}},
  \code{\link{AutoH2oGBMMultiClass}},
  \code{\link{AutoH2oGLMMultiClass}},
  \code{\link{AutoH2oMLMultiClass}},
  \code{\link{AutoXGBoostMultiClass}}
}
\author{
Adrian Antico
}
\concept{Automated MultiClass Classification}
