% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AutoXGBoostClassifier.R
\name{AutoXGBoostClassifier}
\alias{AutoXGBoostClassifier}
\title{AutoXGBoostClassifier is an automated XGBoost modeling framework with grid-tuning and model evaluation}
\usage{
AutoXGBoostClassifier(data, TrainOnFull = FALSE, ValidationData = NULL,
  TestData = NULL, TargetColumnName = NULL, FeatureColNames = NULL,
  IDcols = NULL, model_path = NULL, metadata_path = NULL,
  ModelID = "FirstModel", ReturnFactorLevels = TRUE,
  ReturnModelObjects = TRUE, SaveModelObjects = FALSE, Verbose = 0L,
  NumOfParDepPlots = 3L, NThreads = 8L, eval_metric = "auc",
  TreeMethod = "hist", GridTune = FALSE, MaxModelsInGrid = 10L,
  MaxRunsWithoutNewWinner = 20L, MaxRunMinutes = 24L * 60L,
  PassInGrid = NULL, Shuffles = 1L, Trees = 50L, eta = NULL,
  max_depth = NULL, min_child_weight = NULL, subsample = NULL,
  colsample_bytree = NULL)
}
\arguments{
\item{data}{This is your data set for training and testing your model}

\item{TrainOnFull}{Set to TRUE to train on full data}

\item{ValidationData}{This is your holdout data set used in modeling either refine your hyperparameters.}

\item{TestData}{This is your holdout data set. Catboost using both training and validation data in the training process so you should evaluate out of sample performance with this data set.}

\item{TargetColumnName}{Either supply the target column name OR the column number where the target is located (but not mixed types). Note that the target column needs to be a 0 | 1 numeric variable.}

\item{FeatureColNames}{Either supply the feature column names OR the column number where the target is located (but not mixed types)}

\item{IDcols}{A vector of column names or column numbers to keep in your data but not include in the modeling.}

\item{model_path}{A character string of your path file to where you want your output saved}

\item{metadata_path}{A character string of your path file to where you want your model evaluation output saved. If left NULL, all output will be saved to model_path.}

\item{ModelID}{A character string to name your model and output}

\item{ReturnFactorLevels}{TRUE or FALSE. Set to FALSE to not return factor levels.}

\item{ReturnModelObjects}{Set to TRUE to output all modeling objects (E.g. plots and evaluation metrics)}

\item{SaveModelObjects}{Set to TRUE to return all modeling objects to your environment}

\item{Verbose}{Set to 0 if you want to suppress model evaluation updates in training}

\item{NumOfParDepPlots}{Tell the function the number of partial dependence calibration plots you want to create.}

\item{NThreads}{Set the maximum number of threads you'd like to dedicate to the model run. E.g. 8}

\item{eval_metric}{This is the metric used to identify best grid tuned model. Choose from "logloss","error","aucpr","auc"}

\item{TreeMethod}{Choose from "hist", "gpu_hist"}

\item{GridTune}{Set to TRUE to run a grid tuning procedure. Set a number in MaxModelsInGrid to tell the procedure how many models you want to test.}

\item{MaxModelsInGrid}{Number of models to test from grid options (243 total possible options)}

\item{PassInGrid}{Default is NULL. Provide a data.table of grid options from a previous run.}

\item{Trees}{The maximum number of trees you want in your models}
}
\value{
Saves to file and returned in list: VariableImportance.csv, Model, ValidationData.csv, EvalutionPlot.png, EvaluationMetrics.csv, ParDepPlots.R a named list of features with partial dependence calibration plots, GridCollect, and GridList
}
\description{
AutoXGBoostClassifier is an automated XGBoost modeling framework with grid-tuning and model evaluation that runs a variety of steps. First, a stratified sampling (by the target variable) is done to create train and validation sets. Then, the function will run a random grid tune over N number of models and find which model is the best (a default model is always included in that set). Once the model is identified and built, several other outputs are generated: validation data with predictions, evaluation plot, evaluation boxplot, evaluation metrics, variable importance, partial dependence calibration plots, partial dependence calibration box plots, and column names used in model fitting.
}
\examples{
\donttest{
# Create some dummy correlated data with numeric and categorical features

# Alter correlation value for the simulated data
Correl <- 0.85

# Number of rows you want to use
N <- 25000L 

data <- data.table::data.table(Adrian = runif(N))
data[, x1 := qnorm(Adrian)]
data[, x2 := runif(N)]
data[, Independent_Variable1 := log(pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2)))]
data[, Independent_Variable2 := (pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2)))]
data[, Independent_Variable3 := exp(pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2)))]
data[, Independent_Variable4 := exp(exp(pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2))))]
data[, Independent_Variable5 := sqrt(pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2)))]
data[, Independent_Variable6 := (pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2)))^0.10]
data[, Independent_Variable7 := (pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2)))^0.25]
data[, Independent_Variable8 := (pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2)))^0.75]
data[, Independent_Variable9 := (pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2)))^2]
data[, Independent_Variable10 := (pnorm(Correl * x1 + sqrt(1-Correl^2) * qnorm(x2)))^3]
data[, Independent_Variable11 := as.factor(
  data.table::fifelse(Independent_Variable2 < 0.20, "A",
         data.table::fifelse(Independent_Variable2 < 0.40, "B",
                data.table::fifelse(Independent_Variable2 < 0.6,  "C",
                       data.table::fifelse(Independent_Variable2 < 0.8,  "D", "E")))))]
data[, Adrian := ifelse(Adrian < 0.5, 1, 0)]

# Run function
TestModel <- AutoXGBoostClassifier(

    # GPU or CPU
    TreeMethod = "hist",
    NThreads = 8L,
  
    # Metadata arguments
    model_path = getwd(),
    metadata_path = file.path(getwd(),"R_Model_Testing"),
    ModelID = "Test_Model_1",
    ReturnFactorLevels = TRUE,
    ReturnModelObjects = TRUE,
    SaveModelObjects = FALSE,   
  
    # Data arguments
    data = data,
    TrainOnFull = FALSE,
    ValidationData = NULL,
    TestData = NULL,
    TargetColumnName = "Adrian",
    FeatureColNames = names(data)[2L:ncol(data)],
    IDcols = c("x1","x2"),
  
    # Model evaluation
    eval_metric = "auc",
    NumOfParDepPlots = 3L,
  
    # Grid tuning arguments - PassInGrid is the best of GridMetrics
    PassInGrid = NULL,
    GridTune = FALSE,
    MaxModelsInGrid = 10L,
    MaxRunsWithoutNewWinner = 20L,
    MaxRunMinutes = 24L*60L,
    Verbose = 0L,
  
    # Trees, Depth, and LearningRate used in the bandit grid tuning
    # Must set Trees to a single value if you are not grid tuning
    # The ones below can be set to NULL and the values in the example will be used
    # GrowPolicy is turned off for CPU runs
    # BootStrapType utilizes Poisson only for GPU and MVS only for CPU   
    Shuffles = 1L,
    Trees = 50L,
    eta = NULL,
    max_depth = NULL,
    min_child_weight = NULL,
    subsample = NULL,
    colsample_bytree = NULL)
}
}
\seealso{
Other Automated Binary Classification: \code{\link{AutoCatBoostClassifier}},
  \code{\link{AutoH2oDRFClassifier}},
  \code{\link{AutoH2oGBMClassifier}},
  \code{\link{AutoH2oGLMClassifier}},
  \code{\link{AutoH2oMLClassifier}}
}
\author{
Adrian Antico
}
\concept{Automated Binary Classification}
